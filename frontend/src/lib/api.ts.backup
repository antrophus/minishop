// API 기본 설정
import { API_CONFIG, AUTH_ENDPOINTS, createAuthUrl } from './api/config';

const API_BASE_URL = API_CONFIG.AUTH_URL; // 인증 API는 별도 URL 사용

// API 응답 타입 정의
export interface ApiResponse<T = any> {
  success: boolean;
  data?: T;
  message?: string;
  error?: string;
}

// 백엔드 프로필 API 응답 타입 (중첩 구조)
export interface ProfileApiResponse {
  success: boolean;
  data: UserProfile;
}

// 회원가입 요청 타입
export interface SignUpRequest {
  name: string;
  email: string;
  username: string;
  password: string;
  phone?: string;
  address?: string;
  gender?: string;
}

// 회원가입 응답 타입
export interface SignUpResponse {
  id: number;
  email: string;
  username: string;
  name: string;
  createdAt: string;
  success: boolean;
  message: string;
}

// 이메일 인증 요청 타입
export interface EmailVerificationRequest {
  email: string;
  name: string;
}

// 회원가입 완료 요청 타입
export type CompleteRegistrationRequest = {
  email: string;
  password: string;
  name: string;
};

// 사용자 프로필 타입
export interface UserProfile {
  id: number;
  email: string;
  username: string;
  name: string;
  phone?: string;
  address?: string;
  gender?: string;
  emailVerified: boolean;
  active: boolean;
  createdAt: string;
  lastLoginAt?: string;
}

// 로그인 응답 타입 (백엔드 UserLoginResponse와 일치)
export interface SignInResponse {
  accessToken: string;
  tokenType: string;
  expiresIn: number;
  userId: number;
  email: string;
  username: string;
  name: string;
}
// API 요청 함수
class ApiClient {
  private baseURL: string;

  constructor(baseURL: string) {
    this.baseURL = baseURL;
  }

  private async request<T>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<ApiResponse<T>> {
    try {
      const url = `${this.baseURL}${endpoint}`;
      const config: RequestInit = {
        headers: {
          'Content-Type': 'application/json',
          ...options.headers,
        },
        ...options,
      };

      // JWT 토큰이 필요한 API에 자동으로 토큰 추가
      const token = this.getAuthToken();
      if (token && this.isAuthRequiredEndpoint(endpoint)) {
        config.headers = {
          ...config.headers,
          'Authorization': `Bearer ${token}`,
        };
      }

      const response = await fetch(url, config);
      
      // JSON 응답인지 확인
      const contentType = response.headers.get('content-type');
      if (contentType && contentType.includes('application/json')) {
        const data = await response.json();
        
        if (!response.ok) {
          return {
            success: false,
            error: typeof data === 'string' ? data : data.message || `HTTP ${response.status}`,
          };
        }
        
        return {
          success: true,
          data,
        };
      } else {
        // 텍스트 응답 처리
        const text = await response.text();
        
        if (!response.ok) {
          return {
            success: false,
            error: text || `HTTP ${response.status}`,
          };
        }
        
        return {
          success: true,
          data: text as any,
          message: text,
        };
      }
    } catch (error) {
      console.error('API 요청 실패:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '네트워크 오류가 발생했습니다.',
      };
    }
  }

  // JWT 토큰 가져오기
  private getAuthToken(): string | null {
    if (typeof window === 'undefined') return null;
    return localStorage.getItem('authToken');
  }

  // 인증이 필요한 엔드포인트인지 확인
  private isAuthRequiredEndpoint(endpoint: string): boolean {
    const authRequiredEndpoints = ['/auth/profile', '/auth/password'];
    return authRequiredEndpoints.some(path => endpoint.includes(path));
  }
  // 이메일 인증 요청 (회원가입 전)
  async requestEmailVerification(data: EmailVerificationRequest): Promise<ApiResponse<any>> {
    return this.request<any>(AUTH_ENDPOINTS.EMAIL_VERIFICATION, {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  // 회원가입 완료 (이메일 인증 후)
  async completeRegistration(data: CompleteRegistrationRequest): Promise<ApiResponse<any>> {
    return this.request<any>(AUTH_ENDPOINTS.COMPLETE_REGISTRATION, {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  // 회원가입 (기존 방식)
  async signUp(userData: SignUpRequest): Promise<ApiResponse<SignUpResponse>> {
    return this.request<SignUpResponse>(AUTH_ENDPOINTS.REGISTER, {
      method: 'POST',
      body: JSON.stringify({
        ...userData,
        username: userData.email, // 이메일을 username으로도 사용
      }),
    });
  }

  // 이메일 인증 상태 확인
  async checkEmailVerification(email: string): Promise<ApiResponse<EmailVerificationStatus>> {
    return this.request<EmailVerificationStatus>(`${AUTH_ENDPOINTS.VERIFICATION_STATUS}?email=${encodeURIComponent(email)}`);
  }

  // 이메일 인증 재발송
  async resendEmailVerification(email: string): Promise<ApiResponse<string>> {
    return this.request<string>(AUTH_ENDPOINTS.RESEND_VERIFICATION, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: `email=${encodeURIComponent(email)}`,
    });
  }

  // 로그인
  async signIn(emailOrUsername: string, password: string): Promise<ApiResponse<SignInResponse>> {
    return this.request<SignInResponse>(AUTH_ENDPOINTS.LOGIN, {
      method: 'POST',
      body: JSON.stringify({
        emailOrUsername,
        password,
      }),
    });
  }

  // 사용자 정보 조회
  async getUserInfo(email: string): Promise<ApiResponse<{email: string, name: string, emailVerified: boolean}>> {
    return this.request<{email: string, name: string, emailVerified: boolean}>(`${AUTH_ENDPOINTS.USER_INFO}?email=${encodeURIComponent(email)}`, {
      method: 'GET',
    });
  }

  // 현재 사용자 프로필 조회 (JWT 토큰 필요)
  async getCurrentUserProfile(): Promise<ApiResponse<UserProfile>> {
    return this.request<UserProfile>(AUTH_ENDPOINTS.PROFILE, {
      method: 'GET',
    });
  }

  // 현재 사용자 프로필 업데이트 (JWT 토큰 필요)
  async updateCurrentUserProfile(profileData: Partial<Pick<UserProfile, 'name' | 'phone' | 'address' | 'gender'>>): Promise<ApiResponse<UserProfile>> {
    return this.request<UserProfile>(AUTH_ENDPOINTS.PROFILE, {
      method: 'POST',
      body: JSON.stringify(profileData),
    });
  }
}
// API 클라이언트 인스턴스 생성
export const apiClient = new ApiClient(API_BASE_URL);

// 편의 함수들
export const authApi = {
  requestEmailVerification: (data: EmailVerificationRequest) => apiClient.requestEmailVerification(data),
  completeRegistration: (data: CompleteRegistrationRequest) => apiClient.completeRegistration(data),
  signUp: (userData: SignUpRequest) => apiClient.signUp(userData),
  checkEmailVerification: (email: string) => apiClient.checkEmailVerification(email),
  resendEmailVerification: (email: string) => apiClient.resendEmailVerification(email),
  signIn: (emailOrUsername: string, password: string) => apiClient.signIn(emailOrUsername, password),
  getUserInfo: (email: string) => apiClient.getUserInfo(email),
  getCurrentUserProfile: () => apiClient.getCurrentUserProfile(),
  updateCurrentUserProfile: (profileData: Partial<Pick<UserProfile, 'name' | 'phone' | 'address' | 'gender'>>) => apiClient.updateCurrentUserProfile(profileData),
};

// 인증 관련 유틸리티 함수들
export const authUtils = {
  // 토큰 저장
  setAuthToken: (token: string) => {
    if (typeof window !== 'undefined') {
      localStorage.setItem('authToken', token);
    }
  },

  // 토큰 가져오기
  getAuthToken: () => {
    if (typeof window !== 'undefined') {
      return localStorage.getItem('authToken');
    }
    return null;
  },

  // 토큰 제거 (로그아웃)
  removeAuthToken: () => {
    if (typeof window !== 'undefined') {
      localStorage.removeItem('authToken');
    }
  },

  // 로그인 상태 확인
  isLoggedIn: () => {
    return authUtils.getAuthToken() !== null;
  },
};